#!/bin/bash

set -o nounset

# =============================================
#  Global config of the application
# =============================================

PRG="$BASH_SOURCE"
while [ -h "$PRG" ] ; do
  ls=$(ls -ld "$PRG")
  link=$(expr "$ls" : '.*-> \(.*\)$')
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=$(dirname "$PRG")"/$link"
  fi
done

ROOT_PATH="."
if [ -x "$(command -v realpath)" ]; then
  ROOT_PATH=$(realpath "$(dirname "$PRG")")
fi

set -o allexport
source $ROOT_PATH/.env
source $ROOT_PATH/scripts/utils.sh
source $ROOT_PATH/scripts/configure.sh
set +o allexport

# =============================================
#  Helper that describes all functionalities
# =============================================

if [[ $# -eq 0 ]] || [[ "$1" == "-h" ]]; then
    echo "$(basename "$0") [-h] [-e env -b backend -f file c] -- program to deal with $APP_NAME ecosystem
where:
    -h  show this help text"
    exit 0
fi

CMD="$1"
shift

# =============================================
# Local commands : use Docker
# =============================================

# Connect to instance in bash mode
if [[ "$CMD" == "bash" ]]; then
  check start apiweb
  docker exec -it $APP_NAME-apiweb bash
  exit_with_success


# Build the docker images
elif [[ "$CMD" == "build" ]]; then
  docker-compose build $*
  exit_with_success


# Run celery, ex ./$COMMAND_NAME celery upgrade HEAD
elif [[ "$CMD" == "celery" ]]; then
  QUEUE=$1
  shift
  SUB_COMMANDS=$*
  check start apipostgresdb
  check start apiredisdb
  check start apischeduler
  check start apiweb
  check start api${QUEUE}worker
  docker exec ${APP_NAME}-api${QUEUE}worker bash -c "cd /opt/api && celery $SUB_COMMANDS"
  exit_with_success


# Apply sub command to the databases from tar db files
elif [[ "$CMD" == "database" ]]; then
  SUB_COMMAND=$1
  shift
  if [[ "$SUB_COMMAND" == "rm" ]]; then
    check stop apipostgresdb
    check stop apiweb
    sudo rm -rf $ROOT_PATH/docker_data/apipostgresdb
  elif [[ "$SUB_COMMAND" == "schema" ]]; then
    check start apipostgresdb
    FILE=schema_$(date +"%Y_%m_%d__%H_%M_%S").sql
    docker exec $APP_NAME-apipostgresdb bash -c "PGPASSWORD=\$POSTGRES_PASSWORD pg_dump -h localhost -d \$POSTGRES_DB -U \$POSTGRES_USER --no-comments --no-owner -N function_schema --no-privileges --schema-only --exclude-table alembic_version --exclude-schema topology --username \$POSTGRES_USER --format p > /var/lib/postgresql/$FILE"
    sudo sed -i "s/SELECT pg_catalog.set_config('search_path', '', false);/SET search_path = public, pg_catalog;/g" $ROOT_PATH/docker_data/apipostgresdb/$FILE
  else
    check start apipostgresdb
    check start apiweb
    docker exec $APP_NAME-apiweb bash -c "cd /opt/api && PYTHONPATH=. python manager.py database $SUB_COMMAND"
  fi
  exit_with_success


# Run pip, ex ./$COMMAND_NAME celery upgrade HEAD
elif [[ "$CMD" == "pip" ]]; then
  SUB_COMMANDS=$*
  check start apidefaultworker
  check start apiweb
  docker exec ${APP_NAME}-apidefaultworker bash -c "cd /opt/api && pip $SUB_COMMANDS"
  docker exec ${APP_NAME}-apiweb bash -c "cd /opt/api && pip $SUB_COMMANDS"
  exit_with_success


# Connect to Postgresql database in command line using psql
elif [[ "$CMD" == "psql" ]]; then
  check start apipostgresdb
	COLUMNS=${COLUMNS:-''};
	docker exec -it $APP_NAME-apipostgresdb bash -c "COLUMNS=\"'$COLUMNS'\" psql -U \$POSTGRES_USER \$POSTGRES_DB $*"
  exit_with_success


# Publish package to test PyPi
elif [[ "$CMD" == "prepublish" ]]; then
  VERSION=$(./$COMMAND_NAME version)
  VERSION=$(echo $VERSION  | cut -d' ' -f1)
  check start apiweb
  docker exec -it $APP_NAME-apiweb bash -c "cd /opt/api &&
    rm -rf build &&
    rm -rf dist &&
    PYTHONPATH=. python setup.py sdist bdist_wheel &&
    sleep 1 &&
    twine check dist/${PIP_NAME}-${VERSION}.tar.gz &&
    twine upload --repository-url https://test.pypi.org/legacy/ dist/*"
  exit_with_success





# Publish package to PyPi
elif [[ "$CMD" == "publish" ]]; then
  check start apiweb
  docker exec -it $APP_NAME-apiweb bash -c "cd /opt/api && PYTHONPATH=. twine upload dist/*"
  exit_with_success

# Force docker-compose to build the docker images
elif [[ "$CMD" == "rebuild" ]]; then
  docker-compose -f docker-compose.yml pull apipostgresdb
  docker-compose build --no-cache $*
  exit_with_success


# Restart API after removing the database and files
elif [[ "$CMD" == "restart" ]]; then
  docker-compose down --volumes
  docker-compose up --force-recreate
  exit_with_success


# Start containers
elif [[ "$CMD" == "start" ]]; then
  docker-compose up $*
  exit_with_success


# Stop containerss
elif [[ "$CMD" == "stop" ]]; then
  docker-compose stop $*
  exit_with_success


# Create symlink to use COMMAND_NAME command (admin rights may be needed)
elif [[ "$CMD" == "symlink" ]]; then
  cd /usr/local/bin && ln -sf $ROOT_PATH/$COMMAND_NAME $COMMAND_NAME && chmod +x $COMMAND_NAME && chmod +x $ROOT_PATH/$COMMAND_NAME
  exit_with_success


# Run tests for API (Need start-backend to be successful and delete all data)
elif [[ "$CMD" == "test" ]]; then
  if [[ $# == 0 ]]; then
    PYTEST_ARGS="tests"
  else
    PYTEST_ARGS=$*
  fi
  check start apiweb
  docker exec $APP_NAME-apiweb bash -c "cd /opt/api && PYTHONPATH=. pytest --color=yes -rsx -v $PYTEST_ARGS"
  exit_with_success


# Get the last version of the library
elif [[ "$CMD" == "version" ]]; then
  check start apiweb
  docker exec $APP_NAME-apiweb bash -c "cd /opt/api && PYTHONPATH=. python -c \"import $MODULE_NAME; print($MODULE_NAME.__version__)\""
  exit_with_success

else
  INTERACTIVE_MODE=''
  if [[ "$CMD" == "python" ]]; then
    CMD="shell"
    INTERACTIVE_MODE='-it'
  fi
  check start apiweb
  docker exec $INTERACTIVE_MODE $APP_NAME-apiweb bash -c "cd /opt/api && PYTHONPATH=. python manager.py $CMD $*"
  exit_with_success
fi

# =============================================
# Execute command
# =============================================

exit_with_error "Did not find a matched command for '$CMD'"
